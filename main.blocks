<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id="=c!Dvcdlw,aeVec*i_OZ" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="@+N`x%1;?/=RU,2#st2-"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Mindstorms {" line1="" line2="    //SERVO" line3="    export enum ServoAdresse {" line4="        //% block=&quot;Servo_1&quot;" line5="        Servo1 = 0x08," line6="        //% block=&quot;Servo_2&quot;" line7="        Servo2 = 0x1B," line8="        //% block=&quot;Servo_3&quot;" line9="        Servo3 = 0x2B," line10="        //% block=&quot;Servo_4&quot;" line11="        Servo4 = 0x3B," line12="        //% block=&quot;Servo_5&quot;" line13="        Servo5 = 0x4B," line14="        //% block=&quot;Servo_6&quot;" line15="        Servo6 = 0x5B," line16="        //% block=&quot;Servo_7&quot;" line17="        Servo7 = 0x6B," line18="        //% block=&quot;Servo_8&quot;" line19="        Servo8 = 0x7B," line20="    }" line21="    //% block=&quot;Bewege %adresse auf %position Grad&quot;" line22="    //% adresse.defl=ServoAdresse.Servo1" line23="    //% position.min=0 position.max=180" line24="    export function servoBewegen(adresse: ServoAdresse, position: number) {" line25="" line26="        // Buffer mit 1 Byte: [Position]" line27="        let buffer = pins.createBuffer(1)" line28="        buffer[0] = position" line29="" line30="        // Senden über I²C" line31="        pins.i2cWriteBuffer(adresse, buffer)" line32="    }" line33="    //SERVO" line34="" line35="" line36="    //TASTER" line37="    export enum TasterAdresse {" line38="        //% block=&quot;Taster_1&quot;" line39="        Taster1 = 0x07," line40="        //% block=&quot;Taster_2&quot;" line41="        Taster2 = 0x17," line42="    }" line43="    //% block=&quot;Lese %adresse aus&quot;" line44="    //% adresse.defl=TasterAdresse.Taster1" line45="    export function Taster_Abfrage(adresse: TasterAdresse): Boolean {" line46="        let zustand = pins.i2cReadNumber(adresse, NumberFormat.UInt8BE)" line47="        return zustand" line48="    }" line49="    //TASTER" line50="" line51="    //Ultraschallsensor" line52="    export enum UltraschallsensorAdresse {" line53="        //% block=&quot;Ultraschallsensor_1&quot;" line54="        Ultraschallsensor1 = 0x08," line55="        //% block=&quot;Ultraschallsensor_2&quot;" line56="        Ultraschallsensor2 = 0x18," line57="        //% block=&quot;Ultraschallsensor_3&quot;" line58="        Ultraschallsensor3 = 0x28," line59="        //% block=&quot;Ultraschallsensor_4&quot;" line60="        Ultraschallsensor4 = 0x38," line61="        //% block=&quot;Ultraschallsensor_5&quot;" line62="        Ultraschallsensor5 = 0x48," line63="        //% block=&quot;Ultraschallsensor_6&quot;" line64="        Ultraschallsensor6 = 0x58," line65="        //% block=&quot;Ultraschallsensor_7&quot;" line66="        Ultraschallsensor7 = 0x68," line67="        //% block=&quot;Ultraschallsensor_8&quot;" line68="        Ultraschallsensor8 = 0x78," line69="    }" line70="    //% block=&quot;Abstand %adresse in cm&quot;" line71="    //% adresse.defl=UltraschallsensorAdresse.Ultraschallsensor1" line72="    export function Ultraschallsensor_Wert(adresse: UltraschallsensorAdresse): number {" line73="        let Wert = pins.i2cReadNumber(adresse, NumberFormat.UInt16BE)" line74="        return Wert" line75="    }" line76="    //Ultraschallsensor" line77="" line78="}" numlines="79"></mutation></block></statement></block></xml>